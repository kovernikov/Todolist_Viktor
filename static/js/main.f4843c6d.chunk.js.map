{"version":3,"sources":["serviceWorker.ts","state/tasks-reducer.ts","state/todolists-reducer.ts","state/store.ts","AddItemForm.tsx","EditableSpan.tsx","TodoList.tsx","AppWithRedux.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","initialState","rootReducer","combineReducers","tasks","state","action","type","todolistTasks","todoListId","filter","task","id","taskId","newTask","v1","title","isDone","todolistId","map","copyTasks","newState","todoListID","todolists","todoLists","tl","newTodoList","store","createStore","AddItemForm","props","useState","setTitle","error","setError","onClickAddItem","validatedTitle","trim","addItem","TextField","variant","size","value","onChange","e","currentTarget","onKeyPress","key","label","helperText","IconButton","onClick","color","AddCircle","EditableSpan","editMode","setEditMode","offEditMode","changeTitle","autoFocus","onBlur","onDoubleClick","TodoList","tasksJSXElement","t","className","Checkbox","checked","changeTaskStatus","changeTaskTitle","removeTask","Backspace","changeTodoListTitle","removeTodoList","Delete","addTask","style","listStyle","padding","Button","changeTodoListFilter","margin","AppWithRedux","useSelector","dispatch","useDispatch","taskID","addTaskAC","newValue","changeTaskTitleAC","changeTodoListFilterAC","changeTodoListTitleAC","removeTodoListAC","todoListComponents","tasksForTodoList","getFilterTasks","Grid","item","Paper","elevation","AppBar","position","Toolbar","justifyContent","Menu","Typography","Container","fixed","container","addTodoListAC","spacing","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.f4843c6d.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {TasksStateType, TaskType} from '../App';\r\nimport {v1} from 'uuid';\r\nimport {AddTodoListAT, RemoveTodoListAT} from './todolists-reducer';\r\n\r\n\r\nexport type RemoveTaskAT = {\r\n\ttype: 'REMOVE-TASK'\r\n\ttaskId: string\r\n\ttodoListId: string\r\n}\r\ntype addTaskAT = {\r\n\ttype: 'ADD-TASK'\r\n\ttitle: string,\r\n\ttodolistId: string,\r\n}\r\ntype changeTaskStatusAT = {\r\n\ttype: 'CHANGE-TASK-STATUS',\r\n\ttaskId: string,\r\n\tisDone: boolean,\r\n\ttodoListId: string\r\n}\r\ntype changeTaskTitleAT = {\r\n\ttype: 'CHANGE-TASK-TITLE',\r\n\ttaskId: string,\r\n\ttitle: string,\r\n\ttodoListId: string\r\n}\r\n\r\ntype ActionType = RemoveTaskAT | addTaskAT | changeTaskStatusAT | changeTaskTitleAT | AddTodoListAT | RemoveTodoListAT;\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionType): TasksStateType => {\r\n\tswitch (action.type) {\r\n\t\tcase 'REMOVE-TASK': {\r\n\t\t\tconst todolistTasks = state[action.todoListId];\r\n\t\t\ttodolistTasks.filter(task => task.id !== action.taskId)\r\n\t\t\treturn {...state, [action.todoListId]: state[action.todoListId].filter(task => task.id !== action.taskId)};\r\n\t\t}\r\n\t\tcase 'ADD-TASK': {\r\n\t\t\tconst newTask: TaskType = {\r\n\t\t\t\tid: v1(),\r\n\t\t\t\ttitle: action.title,\r\n\t\t\t\tisDone: false\r\n\t\t\t}\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\t[action.todolistId]: [newTask, ...state[action.todolistId]]\r\n\t\t\t}\r\n\t\t}\r\n\t\tcase 'CHANGE-TASK-STATUS':\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\t[action.todoListId]: state[action.todoListId].map(task => {\r\n\t\t\t\t\tif (task.id === action.taskId) {\r\n\t\t\t\t\t\treturn {...task, isDone: action.isDone}\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\treturn task\r\n\t\t\t\t\t}\r\n\t\t\t\t\t// return  task.id === action.taskId ? {...task, isDone: action.isDone} : task\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\tcase 'CHANGE-TASK-TITLE': {\r\n\t\t\tconst copyTasks = {...state}\r\n\t\t\tcopyTasks[action.todoListId] = state[action.todoListId].map(task => task.id === action.taskId ? {\r\n\t\t\t\t...task,\r\n\t\t\t\ttitle: action.title\r\n\t\t\t} : task)\r\n\t\t\treturn copyTasks\r\n\t\t}\r\n\t\tcase 'ADD-TODOLIST':\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\t[action.todolistId]: []\r\n\t\t\t}\r\n\t\tcase 'REMOVE-TODOLIST':\r\n\t\t\tlet newState = {...state}\r\n\t\t\tdelete newState[action.todoListID]\r\n\t\t\treturn newState\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n}\r\nexport const removeTaskAC = (taskId: string, todoListId: string): RemoveTaskAT => {\r\n\treturn {type: 'REMOVE-TASK', taskId: taskId, todoListId}\r\n}\r\nexport const addTaskAC = (title: string, todolistId: string,): addTaskAT => {\r\n\treturn {type: 'ADD-TASK', title: title, todolistId}\r\n}\r\nexport const changeTaskStatusAC = (taskId: string, isDone: boolean, todoListId: string): changeTaskStatusAT => {\r\n\treturn {type: 'CHANGE-TASK-STATUS', taskId, isDone, todoListId}\r\n}\r\nexport const changeTaskTitleAC = (taskId: string, title: string, todoListId: string): changeTaskTitleAT => {\r\n\treturn {type: 'CHANGE-TASK-TITLE', taskId, title, todoListId}\r\n}\r\n","import {FilterValueType, TodoListType} from '../App';\r\nimport {v1} from 'uuid';\r\n\r\nexport type RemoveTodoListAT = {\r\n\ttype: 'REMOVE-TODOLIST'\r\n\ttodoListID: string\r\n}\r\n\r\nexport type AddTodoListAT = {\r\n\ttype: 'ADD-TODOLIST'\r\n\ttitle: string\r\n\ttodolistId: string\r\n}\r\ntype ChangeTodoListFilterAT = {\r\n\ttype: 'CHANGE-TODOLIST-FILTER'\r\n\tfilter: FilterValueType\r\n\ttodoListID: string\r\n}\r\n\r\ntype ChangeTodoListTitleAT = {\r\n\ttype: 'CHANGE-TODOLIST-TITLE'\r\n\ttitle: string\r\n\ttodoListID: string\r\n}\r\n\r\nexport type ActionType = RemoveTodoListAT | ChangeTodoListFilterAT | AddTodoListAT | ChangeTodoListTitleAT\r\n\r\nconst initialState: Array<TodoListType> = []\r\n\r\nexport const todolistsReducer = (todoLists: Array<TodoListType> = initialState, action: ActionType): Array<TodoListType> => {\r\n\tswitch (action.type) {\r\n\t\tcase 'REMOVE-TODOLIST':\r\n\t\t\treturn todoLists.filter(tl => tl.id !== action.todoListID);\r\n\t\tcase 'ADD-TODOLIST':\r\n\t\t\tconst newTodoList: TodoListType = {\r\n\t\t\t\tid: action.todolistId,\r\n\t\t\t\ttitle: action.title,\r\n\t\t\t\tfilter: 'all'\r\n\t\t\t}\r\n\t\t\treturn [...todoLists, newTodoList]\r\n\t\tcase 'CHANGE-TODOLIST-FILTER':\r\n\t\t\treturn todoLists.map(tl => tl.id === action.todoListID ? {...tl, filter: action.filter} : tl)\r\n\t\tcase 'CHANGE-TODOLIST-TITLE':\r\n\t\t\treturn todoLists.map(tl => tl.id === action.todoListID ? {...tl, title: action.title} : tl)\r\n\t\tdefault:\r\n\t\t\treturn todoLists\r\n\t}\r\n}\r\nexport const removeTodoListAC = (todoListID: string): RemoveTodoListAT => {\r\n\treturn {\r\n\t\ttype: 'REMOVE-TODOLIST',\r\n\t\ttodoListID: todoListID\r\n\t}\r\n}\r\nexport const addTodoListAC = (title: string): AddTodoListAT => {\r\n\treturn {\r\n\t\ttype: 'ADD-TODOLIST',\r\n\t\ttitle: title,\r\n\t\ttodolistId: v1(),\r\n\t}\r\n};\r\n\r\nexport const changeTodoListFilterAC = (filter: FilterValueType, todoListID: string): ChangeTodoListFilterAT => {\r\n\treturn {\r\n\t\ttype: 'CHANGE-TODOLIST-FILTER',\r\n\t\tfilter: filter,\r\n\t\ttodoListID: todoListID,\r\n\t}\r\n};\r\n\r\nexport const changeTodoListTitleAC = (title: string, todoListID: string): ChangeTodoListTitleAT => {\r\n\treturn {\r\n\t\ttype: 'CHANGE-TODOLIST-TITLE',\r\n\t\ttitle: title,\r\n\t\ttodoListID: todoListID,\r\n\t}\r\n}","import {tasksReducer} from './tasks-reducer';\nimport {todolistsReducer} from './todolists-reducer';\nimport {combineReducers, createStore} from 'redux';\n\n// объединяя reducer-ы с помощью combineReducers,\n// мы задаём структуру нашего единственного объекта-состояния\nconst rootReducer = combineReducers({\n\ttasks: tasksReducer,\n\ttodolists: todolistsReducer\n})\n// непосредственно создаём store\nexport const store = createStore(rootReducer);\n// определить автоматически тип всего объекта состояния\nexport type AppRootStateType = ReturnType<typeof rootReducer>\n\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\n// @ts-ignore\nwindow.store = store;\n\n","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {IconButton, TextField} from '@material-ui/core';\r\nimport {AddCircle} from '@material-ui/icons';\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n}\r\n\r\nfunction AddItemForm(props: AddItemFormPropsType) {\r\n    const [title, setTitle] = useState<string>('')\r\n    const [error, setError] = useState<boolean>(false)\r\n\r\n    const onChangeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n        setError(false)\r\n    }\r\n    const onKeyPressAddItem = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === 'Enter') {\r\n            onClickAddItem()\r\n        }\r\n    }\r\n    const onClickAddItem = () => {\r\n        const validatedTitle = title.trim()\r\n        if (validatedTitle) {\r\n            props.addItem(validatedTitle)\r\n        } else {\r\n            setError(true)\r\n        }\r\n        setTitle('')\r\n    }\r\n\r\n    const errorMessage = error\r\n        ? <div style={{color: 'red'}}>Title is required!</div>\r\n        : null\r\n\r\n    return (\r\n        <div>\r\n            <TextField\r\n                variant={'outlined'}\r\n                size={'small'}\r\n                value={title}\r\n                onChange={onChangeTitle}\r\n                onKeyPress={onKeyPressAddItem}\r\n\r\n                label={'Title'}\r\n                error={error}\r\n                helperText={error && 'Title is required!'}\r\n            />\r\n            {/*<input*/}\r\n            {/*    value={title}*/}\r\n            {/*    onChange={onChangeTitle}*/}\r\n            {/*    onKeyPress={onKeyPressAddItem}*/}\r\n            {/*    className={error ? \"error\" : \"\"}*/}\r\n            {/*/>*/}\r\n            {/*<IconButton onClick={onClickAddItem} color={\"primary\"}>*/}\r\n            {/*    <AddBox/>*/}\r\n            {/*</IconButton>*/}\r\n\r\n\r\n            <IconButton onClick={onClickAddItem} color={'primary'}>\r\n                <AddCircle/>\r\n            </IconButton>\r\n\r\n            {/*{errorMessage}*/}\r\n            {/*{error && <div style={{color: \"red\"}}>Title is required!</div>}*/}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AddItemForm;\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {TextField} from '@material-ui/core';\r\n\r\ntype EditableSpanPropsType = {\r\n    title: string\r\n    changeTitle: (title: string) => void\r\n}\r\n\r\nfunction EditableSpan(props: EditableSpanPropsType) {\r\n    const [title, setTitle] = useState<string>(props.title)\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n    const onEditMode = () => setEditMode(true)\r\n    const offEditMode = () => {\r\n        setEditMode(false)\r\n        props.changeTitle(title)\r\n    }\r\n\r\n    const onChangeTitle = (e: ChangeEvent<HTMLInputElement>) => setTitle(e.currentTarget.value)\r\n    const onEnterOffEditMode = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === 'Enter') {\r\n            offEditMode()\r\n        }\r\n    }\r\n\r\n    return (\r\n        editMode\r\n            ? <TextField\r\n                value={title}\r\n                autoFocus  /*или autoFocus={true}*/\r\n                onBlur={offEditMode}\r\n                onChange={onChangeTitle}\r\n                onKeyPress={onEnterOffEditMode}\r\n            />\r\n            : <span onDoubleClick={onEditMode}>{props.title}</span>\r\n    )\r\n}\r\n\r\nexport default EditableSpan;\r\n","import React, {ChangeEvent} from 'react';\r\nimport {FilterValueType, TaskType} from './App';\r\nimport AddItemForm from './AddItemForm';\r\nimport EditableSpan from './EditableSpan';\r\nimport {Button, Checkbox, IconButton} from '@material-ui/core';\r\nimport {Backspace, Delete} from '@material-ui/icons';\r\n\r\ntype PropsTodoListType = {\r\n    filter: FilterValueType\r\n    todoListID: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    addTask: (title: string, todoListID: string) => void\r\n    removeTask: (taskID: string, todoListID: string) => void\r\n    removeTodoList: (todoListID: string) => void\r\n    changeTodoListFilter: (filterValue: FilterValueType, todoListID: string) => void\r\n    changeTodoListTitle: (title: string, todoListID: string) => void\r\n    changeTaskStatus: (taskId: string, isDone: boolean, todoListID: string) => void\r\n    changeTaskTitle: (taskID: string, title: string, todoListID: string) => void\r\n}\r\n\r\n\r\nfunction TodoList(props: PropsTodoListType) {\r\n    const {filter} = props;\r\n\r\n    const tasksJSXElement = props.tasks.map(t => {\r\n            const removeTask = () => props.removeTask(t.id, props.todoListID)\r\n            const changeTaskStatus = (e: ChangeEvent<HTMLInputElement>) => props.changeTaskStatus(t.id, e.currentTarget.checked, props.todoListID)\r\n            const changeTaskTitle = (title: string) => props.changeTaskTitle(t.id, title, props.todoListID)\r\n            return (\r\n                <div key={t.id}>\r\n                    <span className={t.isDone ? 'is-done' : ''}>\r\n                        <Checkbox\r\n                            size={'small'}\r\n                            color={'primary'}\r\n                            checked={t.isDone}\r\n                            onChange={changeTaskStatus}\r\n                        />\r\n                        <EditableSpan title={t.title} changeTitle={changeTaskTitle}/>\r\n                    </span>\r\n                    {/*<span>{t.title}</span>*/}\r\n                    <IconButton onClick={removeTask} color={'secondary'}>\r\n                        <Backspace/>\r\n                    </IconButton>\r\n                </div>\r\n\r\n            )\r\n        }\r\n    )\r\n    const addTask = (title: string) => props.addTask(title, props.todoListID)\r\n    const changeTodoListTitle = (title: string) => props.changeTodoListTitle(title, props.todoListID)\r\n    const removeTodoList = () => props.removeTodoList(props.todoListID)\r\n    const onClickSetAllFilter = () => props.changeTodoListFilter('all', props.todoListID)\r\n    const onClickSetActiveFilter = () => props.changeTodoListFilter('active', props.todoListID)\r\n    const onClickSetCompletedFilter = () => props.changeTodoListFilter('completed', props.todoListID)\r\n\r\n\r\n    return (\r\n        <div>\r\n            <h3>\r\n                <EditableSpan title={props.title} changeTitle={changeTodoListTitle}/>\r\n                <IconButton onClick={removeTodoList} color={'secondary'}>\r\n                    <Delete/>\r\n                </IconButton>\r\n                {/*<button onClick={() => props.removeTodoList(props.todoListID)}>X</button>*/}\r\n            </h3>\r\n            <AddItemForm addItem={addTask}/>\r\n            <div style={{listStyle: 'none', padding: '0px'}}>\r\n                {tasksJSXElement}\r\n            </div>\r\n            <div>\r\n                <Button\r\n                    size={'small'}\r\n                    variant={filter === 'all' ? 'contained' : 'outlined'}\r\n                    color={'primary'}\r\n                    onClick={onClickSetAllFilter}>All\r\n                </Button>\r\n                <Button\r\n                    style={{margin: '5px'}}\r\n                    size={'small'}\r\n                    variant={filter === 'active' ? 'contained' : 'outlined'}\r\n                    color={'primary'}\r\n                    onClick={onClickSetActiveFilter}>Active\r\n                </Button>\r\n                <Button\r\n                    // style={{marginLeft: '3px'}}\r\n                    size={'small'}\r\n                    variant={filter === 'completed' ? 'contained' : 'outlined'}\r\n                    color={'primary'}\r\n                    onClick={onClickSetCompletedFilter}>Completed\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TodoList;\r\n","import React from 'react';\r\nimport './App.css';\r\nimport TodoList from './TodoList';\r\nimport AddItemForm from './AddItemForm';\r\nimport {AppBar, Button, Container, Grid, IconButton, Paper, Toolbar, Typography,} from '@material-ui/core';\r\nimport {Menu} from '@material-ui/icons';\r\nimport {addTaskAC, changeTaskStatusAC, changeTaskTitleAC, removeTaskAC} from './state/tasks-reducer';\r\nimport {\r\n\taddTodoListAC,\r\n\tchangeTodoListFilterAC,\r\n\tchangeTodoListTitleAC,\r\n\tremoveTodoListAC\r\n} from './state/todolists-reducer';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppRootStateType} from './state/store';\r\n\r\nexport type TaskType = {\r\n\tid: string\r\n\ttitle: string\r\n\tisDone: boolean\r\n}\r\n\r\nexport type TodoListType = {\r\n\tid: string\r\n\ttitle: string\r\n\tfilter: FilterValueType\r\n}\r\n\r\nexport type TasksStateType = {\r\n\t[key: string]: Array<TaskType>\r\n}\r\n\r\nexport  type FilterValueType = 'all' | 'active' | 'completed'\r\n\r\nfunction AppWithRedux() {\r\n\tconst todolists = useSelector<AppRootStateType, TodoListType[]>(\r\n\t\tstate => state.todolists\r\n\t)\r\n\r\n\tconst tasks = useSelector<AppRootStateType, TasksStateType>(\r\n\t\tstate => state.tasks\r\n\t)\r\n\r\n\tconst dispatch = useDispatch()\r\n\t// BLL\r\n\t// const todolistsID_1 = v1()\r\n\t// const todolistsID_2 = v1()\r\n\t//\r\n\t// const [todolists, dispatchToTodolistsReducer] = useReducer(todolistsReducer,[\r\n\t//     {id: todolistsID_1, title: 'What to learn', filter: 'all'},\r\n\t//     {id: todolistsID_2, title: 'What to buy', filter: 'all'},\r\n\t// ])\r\n\t//\r\n\t// const [tasks, dispatchTotasksReducer] = useReducer(tasksReducer,{\r\n\t//     [todolistsID_1]: [\r\n\t//         {id: v1(), title: 'HTML', isDone: true},\r\n\t//         {id: v1(), title: 'CSS', isDone: true},\r\n\t//         {id: v1(), title: 'React', isDone: false},\r\n\t//     ],\r\n\t//     [todolistsID_2]: [\r\n\t//         {id: v1(), title: 'Milk', isDone: true},\r\n\t//         {id: v1(), title: 'Bread', isDone: false},\r\n\t//         {id: v1(), title: 'Meat', isDone: false},\r\n\t//     ],\r\n\t// })\r\n\r\n\tfunction removeTask(taskID: string, todoListID: string) {\r\n\r\n\t\tconst action = removeTaskAC(taskID, todoListID);\r\n\t\tdispatch(action);\r\n\r\n\t}\r\n\r\n\tfunction addTask(title: string, todoListID: string) {\r\n\t\tdispatch(addTaskAC(title, todoListID));\r\n\r\n\t}\r\n\r\n\tfunction changeTaskStatus(taskID: string, newValue: boolean, todoListID: string) {\r\n\t\tconst action = changeTaskStatusAC(taskID, newValue, todoListID);\r\n\t\tdispatch(action);\r\n\r\n\t}\r\n\r\n\tfunction changeTaskTitle(taskID: string, title: string, todoListID: string) {\r\n\t\tconst action = changeTaskTitleAC(taskID, title, todoListID);\r\n\t\tdispatch(action);\r\n\t}\r\n\r\n\r\n\tfunction changeTodoListFilter(filter: FilterValueType, todoListID: string) {\r\n\t\tconst action = changeTodoListFilterAC(filter, todoListID);\r\n\t\tdispatch(action);\r\n\t}\r\n\r\n\tfunction changeTodoListTitle(title: string, todoListID: string) {\r\n\t\tconst action = changeTodoListTitleAC(title, todoListID);\r\n\t\tdispatch(action);\r\n\t}\r\n\r\n\tfunction removeTodoList(todoListID: string) {\r\n\t\tconst action = removeTodoListAC(todoListID);\r\n\t\tdispatch(action);\r\n\t}\r\n\r\n\tfunction addTodoList(title: string) {\r\n\t\tconst action = addTodoListAC(title);\r\n\t\tdispatch(action);\r\n\t\t// }\r\n\t\t// setTodoLists([...todolists, newTodoList])\r\n\t\t// setTasks({...tasks, [newTodoListID]: []})\r\n\t}\r\n\r\n// UI\r\n\tfunction getFilterTasks(tl: TodoListType) {\r\n\t\tswitch (tl.filter) {\r\n\t\t\tcase 'active':\r\n\t\t\t\treturn tasks[tl.id].filter(t => !t.isDone)\r\n\t\t\tcase 'completed':\r\n\t\t\t\treturn tasks[tl.id].filter(t => t.isDone)\r\n\t\t\tdefault:\r\n\t\t\t\treturn tasks[tl.id]\r\n\t\t}\r\n\t}\r\n\r\n\tconst todoListComponents = todolists.map(tl => {\r\n\t\tconst tasksForTodoList = getFilterTasks(tl)\r\n\t\treturn (\r\n\t\t\t<Grid item key={tl.id}>\r\n\t\t\t\t<Paper elevation={5} style={{padding: '20px'}}>\r\n\t\t\t\t\t<TodoList\r\n\t\t\t\t\t\ttodoListID={tl.id}\r\n\t\t\t\t\t\ttitle={tl.title}\r\n\t\t\t\t\t\ttasks={tasksForTodoList}\r\n\t\t\t\t\t\tfilter={tl.filter}\r\n\t\t\t\t\t\taddTask={addTask}\r\n\t\t\t\t\t\tremoveTask={removeTask}\r\n\t\t\t\t\t\tremoveTodoList={removeTodoList}\r\n\t\t\t\t\t\tchangeTaskStatus={changeTaskStatus}\r\n\t\t\t\t\t\tchangeTaskTitle={changeTaskTitle}\r\n\t\t\t\t\t\tchangeTodoListFilter={changeTodoListFilter}\r\n\t\t\t\t\t\tchangeTodoListTitle={changeTodoListTitle}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</Paper>\r\n\t\t\t</Grid>\r\n\t\t)\r\n\t})\r\n\treturn (\r\n\t\t<div className=\"App\">\r\n\t\t\t<AppBar position={'static'}>\r\n\t\t\t\t<Toolbar style={{justifyContent: 'space-between'}}>\r\n\t\t\t\t\t<IconButton color={'inherit'}>\r\n\t\t\t\t\t\t<Menu/>\r\n\t\t\t\t\t</IconButton>\r\n\t\t\t\t\t<Typography variant={'h6'}>\r\n\t\t\t\t\t\tTodolists\r\n\t\t\t\t\t</Typography>\r\n\t\t\t\t\t<Button\r\n\t\t\t\t\t\tcolor={'inherit'}\r\n\t\t\t\t\t\tvariant={'outlined'}\r\n\t\t\t\t\t>Login</Button>\r\n\t\t\t\t</Toolbar>\r\n\t\t\t</AppBar>\r\n\t\t\t<Container fixed>\r\n\t\t\t\t<Grid container style={{padding: '20px 10px'}}>\r\n\t\t\t\t\t<AddItemForm addItem={addTodoList}/>\r\n\t\t\t\t</Grid>\r\n\t\t\t\t<Grid container spacing={5}>\r\n\t\t\t\t\t{todoListComponents}\r\n\t\t\t\t</Grid>\r\n\t\t\t</Container>\r\n\t\t</div>\r\n\t);\r\n\r\n}\r\n\r\nexport default AppWithRedux;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {Provider} from 'react-redux';\r\nimport {store} from './state/store';\r\nimport AppWithRedux from './AppWithRedux';\r\n\r\n// ReactDOM.render(<AppWithReducers />,  document.getElementById('root'));\r\n\r\n\r\nReactDOM.render(\r\n\t<Provider store={store}>\r\n\t\t<AppWithRedux/>\r\n\t</Provider>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}